import 'package:flutter/material.dart';
import 'package:transacto/Components/AppBar/header.dart';
import 'package:transacto/View/Dashboard_/Order/Order_Customar_section/Add_Customar.dart';
import 'package:transacto/View/Dashboard_/Order/Order_Vender_section/add_vendor.dart';

class OrderVenderListPage extends StatefulWidget {
  @override
  _OrderVenderListPageState createState() => _OrderVenderListPageState();
}

class _OrderVenderListPageState extends State<OrderVenderListPage> {
  int currentPage = 1; // Start with the first page
  final int itemsPerPage = 6; // Number of items per page
  List<Map<String, dynamic>> customerList = [
    {'name': 'Vendor Sanjana', 'phone': '1234567890', 'address': 'Dhaka', 'date': '2024-10-01'},
    {'name': 'Vendor Sanjana', 'phone': '1234567890', 'address': 'Dhaka', 'date': '2024-10-01'},
    {'name': 'Mohua Amin', 'phone': '0987654321', 'address': 'Chittagong', 'date': '2024-10-02'},
    {'name': 'Estiaq Noor', 'phone': '2345678901', 'address': 'Sylhet', 'date': '2024-10-03'},
    {'name': 'Estiaq Noor', 'phone': '2345678901', 'address': 'Sylhet', 'date': '2024-10-03'},
    {'name': 'Reaz Nahid', 'phone': '3456789012', 'address': 'Rajshahi', 'date': '2024-10-04'},
    {'name': 'Rabbi Amin', 'phone': '4567890123', 'address': 'Khulna', 'date': '2024-10-05'},
    {'name': 'Sakib Al Baky', 'phone': '5678901234', 'address': 'Barisal', 'date': '2024-10-06'},
    {'name': 'Maria Nur', 'phone': '6789012345', 'address': 'Rangpur', 'date': '2024-10-07'},
    {'name': 'Ahmed Baky', 'phone': '7890123456', 'address': 'Mymensingh', 'date': '2024-10-08'},
    // Add more customers as needed
  ];

  List<Map<String, dynamic>> filteredCustomerList = [];
  String searchQuery = '';

  @override
  void initState() {
    super.initState();
    filteredCustomerList = customerList; // Initialize filtered list
  }

  void updateFilteredList() {
    setState(() {
      filteredCustomerList = customerList
          .where((customer) =>
          customer['name']
              .toLowerCase()
              .contains(searchQuery.toLowerCase()))
          .toList();
      // Reset to first page if the current page exceeds total pages after filtering
      int totalPages = (filteredCustomerList.length / itemsPerPage).ceil();
      if (currentPage > totalPages) {
        currentPage = totalPages > 0 ? totalPages : 1;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    int totalPages = (filteredCustomerList.length / itemsPerPage).ceil(); // Calculate total pages

    return Scaffold(
      appBar: Header(),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Title
            Text(
              'Recent Orders of Vendar',
              style: TextStyle(color: Colors.black, fontSize: 30,fontWeight: FontWeight.bold),
            ),

            // Add Customers Button
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                _buildActionButton(Icons.add, 'Add Orders', Colors.orange, Colors.white),
              ],
            ),
            SizedBox(height: 16),

            // Search and Filter Row
            // Search and Filter Row
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(Icons.filter_list, color: Colors.grey),
                    SizedBox(width: 8),
                    Container(
                      width: 200,
                      child: TextField(
                        onChanged: (value) {
                          searchQuery = value;
                          updateFilteredList(); // Update list on search
                        },
                        decoration: InputDecoration(
                          hintText: 'Search Vendor...',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 16), // Add space between search and dropdown
                    // Decorated Dropdown for Last 7 Days and Last 30 Days
                    Container(
                      width: 200, // Match the width of the search field
                      padding: EdgeInsets.symmetric(horizontal: 12),
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.grey),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: DropdownButtonHideUnderline(
                        child: DropdownButton<String>(
                          value: null,
                          hint: Text('Filter by Date'), // Placeholder text
                          isExpanded: true, // Ensures the dropdown takes full width
                          items: [
                            DropdownMenuItem<String>(
                              value: 'last7days',
                              child: Text('Last 7 Days'),
                            ),
                            DropdownMenuItem<String>(
                              value: 'last30days',
                              child: Text('Last 30 Days'),
                            ),
                          ],
                          onChanged: (value) {
                            if (value == 'last7days') {
                              filterByDateRange(7); // Call the filter function for the last 7 days
                            } else if (value == 'last30days') {
                              filterByDateRange(30); // Call the filter function for the last 30 days
                            }
                          },
                        ),
                      ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    Icon(Icons.sort, color: Colors.grey),
                    SizedBox(width: 8),
                    Icon(Icons.more_vert, color: Colors.grey),
                  ],
                ),
              ],
            ),

            SizedBox(height: 16),

            // Customer List with Headings
            Expanded(
              child: Column(
                children: [
                  // Table headings
                  Row(
                    children: [
                      Expanded(
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: Text('               Sr.No', style: TextStyle(fontWeight: FontWeight.bold)),
                        ),
                      ),
                      VerticalDivider(color: Colors.black, thickness: 1),
                      Expanded(
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: Text('Vendor Name', style: TextStyle(fontWeight: FontWeight.bold)),
                        ),
                      ),
                      VerticalDivider(color: Colors.black, thickness: 1),
                      Expanded(
                        child: Align(
                          alignment: Alignment.center,
                          child: Text('Phone Number', style: TextStyle(fontWeight: FontWeight.bold)),
                        ),
                      ),
                      VerticalDivider(color: Colors.black, thickness: 1),
                      Expanded(
                        child: Align(
                          alignment: Alignment.center,
                          child: Text('                         Address', style: TextStyle(fontWeight: FontWeight.bold)),
                        ),
                      ),
                      VerticalDivider(color: Colors.black, thickness: 1),
                      Expanded(
                        child: Align(
                          alignment: Alignment.center,
                          child: Text('Date', style: TextStyle(fontWeight: FontWeight.bold)),
                        ),
                      ),
                      VerticalDivider(color: Colors.black, thickness: 1),
                      Expanded(
                        child: Align(
                          alignment: Alignment.center,
                          child: Text('Action', style: TextStyle(fontWeight: FontWeight.bold)),
                        ),
                      ),
                    ],
                  ),
                  Divider(thickness: 2),

                  // List of customers
                  Expanded(
                    child: ListView.builder(
                      itemCount: itemsPerPage,
                      itemBuilder: (context, index) {
                        int startIndex = (currentPage - 1) * itemsPerPage;
                        int customerIndex = startIndex + index;

                        // Check if customerIndex is within the bounds of filteredCustomerList
                        if (customerIndex < filteredCustomerList.length) {
                          return _buildCustomerRow(
                            customerIndex + 1,
                            filteredCustomerList[customerIndex]['name'],
                            filteredCustomerList[customerIndex]['phone'],
                            filteredCustomerList[customerIndex]['address'],
                            filteredCustomerList[customerIndex]['date'], // New Date column
                          );
                        } else {
                          return SizedBox.shrink(); // Empty space for unused rows
                        }
                      },
                    ),
                  ),
                ],
              ),
            ),

            // Pagination Row
            SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // Previous button
                IconButton(
                  icon: Icon(Icons.chevron_left),
                  onPressed: currentPage > 1
                      ? () {
                    setState(() {
                      currentPage--;
                    });
                  }
                      : null,
                ),
                Row(
                  children: [
                    for (int i = 1; i <= totalPages; i++)
                      _buildPageButton(i.toString(), currentPage == i),
                  ],
                ),
                // Next button
                IconButton(
                  icon: Icon(Icons.chevron_right),
                  onPressed: currentPage < totalPages
                      ? () {
                    setState(() {
                      currentPage++;
                    });
                  }
                      : null,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Action Button Widget
  Widget _buildActionButton(IconData icon, String text, Color bgColor, Color textColor) {
    return ElevatedButton.icon(
      onPressed: () {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AddVendorPage(
              onAddVendor: (Map<String, dynamic> VendorData) {
                // Update the customer list with new customer data
                setState(() {
                  customerList.add(VendorData); // Add the new customer to the list
                  updateFilteredList(); // Update filtered list after adding a customer
                });
                print("Customer added: $VendorData");
              },
              existingVendor: {},
            );
          },
        );
      },
      icon: Icon(icon, color: textColor),
      label: Text(text, style: TextStyle(color: textColor)),
      style: ElevatedButton.styleFrom(
        backgroundColor: bgColor,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  // Customer Row Widget with Sr. No, Name, Phone Number, Address, Date, and Action (Edit and Delete buttons)
  Widget _buildCustomerRow(int srNo, String name, String phone, String address, String date) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        border: Border(bottom: BorderSide(color: Colors.grey)),
      ),
      child: Row(
        children: [
          Expanded(
            child: Align(
              alignment: Alignment.center, // Centered Sr. No
              child: Text('$srNo', textAlign: TextAlign.center),
            ),
          ),
          VerticalDivider(color: Colors.black, thickness: 1),
          Expanded(
            child: Align(
              alignment: Alignment.centerLeft, // Align to the left
              child: Text(name),
            ),
          ),
          VerticalDivider(color: Colors.black, thickness: 1),
          Expanded(
            child: Align(
              alignment: Alignment.center, // Centered Phone Number
              child: Text(phone),
            ),
          ),
          VerticalDivider(color: Colors.black, thickness: 1),
          Expanded(
            child: Align(
              alignment: Alignment.center, // Centered Address
              child: Text(address),
            ),
          ),
          VerticalDivider(color: Colors.black, thickness: 1),
          Expanded(
            child: Align(
              alignment: Alignment.center, // Centered Date
              child: Text(date),
            ),
          ),
          VerticalDivider(color: Colors.black, thickness: 1),
          Expanded(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                IconButton(
                  icon: Icon(Icons.edit, color: Colors.blue),
                  onPressed: () {
                    // Edit customer logic
                  },
                ),
                IconButton(
                  icon: Icon(Icons.delete, color: Colors.red),
                  onPressed: () {
                    // Confirm deletion
                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: Text('Delete Vendor'),
                          content: Text('Are you sure you want to delete this Vendor?'),
                          actions: [
                            TextButton(
                              onPressed: () {
                                Navigator.of(context).pop(); // Close the dialog
                              },
                              child: Text('Cancel'),
                            ),
                            ElevatedButton(
                              onPressed: () {
                                setState(() {
                                  // Find the customer by matching name, phone, and address
                                  int actualIndex = customerList.indexWhere((customer) =>
                                  customer['name'] == name &&
                                      customer['phone'] == phone &&
                                      customer['address'] == address);
                                  if (actualIndex != -1) {
                                    customerList.removeAt(actualIndex); // Remove customer from the list
                                    updateFilteredList(); // Update filtered list after deletion
                                  }
                                });
                                Navigator.of(context).pop(); // Close the dialog
                              },
                              child: Text('Delete'),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.red,
                              ),
                            ),
                          ],
                        );
                      },
                    );
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Page Button Widget
  Widget _buildPageButton(String text, bool isActive) {
    return GestureDetector(
      onTap: () {
        setState(() {
          currentPage = int.parse(text);
        });
      },
      child: Container(
        padding: EdgeInsets.all(8.0),
        margin: EdgeInsets.symmetric(horizontal: 4.0),
        decoration: BoxDecoration(
          color: isActive ? Colors.orange : Colors.grey[300],
          borderRadius: BorderRadius.circular(8.0),
        ),
        child: Text(text, style: TextStyle(color: isActive ? Colors.white : Colors.black)),
      ),
    );
  }

  void filterByDateRange(int days) {
    setState(() {
      DateTime now = DateTime.now();
      DateTime pastDate = now.subtract(Duration(days: days));

      filteredCustomerList = customerList.where((customer) {
        DateTime customerDate = DateTime.parse(customer['date']);
        return customerDate.isAfter(pastDate) && customerDate.isBefore(now);
      }).toList();

      // Reset to first page if needed
      int totalPages = (filteredCustomerList.length / itemsPerPage).ceil();
      if (currentPage > totalPages) {
        currentPage = totalPages > 0 ? totalPages : 1;
      }
    });
  }

}


 Widget _buildActionButton(IconData icon, String text, Color bgColor, Color textColor) {
    return ElevatedButton.icon(
      onPressed: () {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AddVendorPage(
              onAddVendor: (Map<String, dynamic> VendorData) {
                // Update the customer list with new customer data
                setState(() {
                  customerList.add(VendorData); // Add the new customer to the list
                  updateFilteredList(); // Update filtered list after adding a customer
                });
                print("Customer added: $VendorData");
              },
              existingVendor: {},
            );
          },
        );
      },
      icon: Icon(icon, color: textColor),
      label: Text(text, style: TextStyle(color: textColor)),
      style: ElevatedButton.styleFrom(
        backgroundColor: bgColor,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }